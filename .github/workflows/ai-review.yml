name: AI Code Review

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  ai_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Extract PR metadata
        id: metadata
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const issueMatch = pr.data.body.match(/#(\d+)/);
            let issueBody = "No issue referenced.";
            if (issueMatch) {
              const issueNumber = issueMatch[1];
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              issueBody = issue.data.title + "\n\n" + issue.data.body;
            }

            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Get file contents for each changed file
            const fileContents = await Promise.all(
              files.data.map(async (file) => {
                const content = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: file.filename,
                  ref: pr.data.head.sha,
                });
                return {
                  filename: file.filename,
                  content: Buffer.from(content.data.content, 'base64').toString()
                };
              })
            );

            const changedFiles = fileContents.map(file =>
              `### ${file.filename}\n\`\`\`\n${file.content}\n\`\`\``
            ).join('\n\n');

            core.setOutput("prTitle", pr.data.title);
            core.setOutput("prBody", pr.data.body);
            core.setOutput("issueBody", issueBody);
            core.setOutput("changedFiles", changedFiles);

      - name: Run AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_TITLE: ${{ steps.metadata.outputs.prTitle }}
          PR_BODY: ${{ steps.metadata.outputs.prBody }}
          ISSUE_BODY: ${{ steps.metadata.outputs.issueBody }}
          CHANGED_FILES: ${{ steps.metadata.outputs.changedFiles }}
        run: |
          echo "Instalando dependencias..."
          pip install openai

          echo "Generando prompt..."
          python3 << 'EOF'
          from openai import OpenAI
          import os

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          pr_title = os.getenv("PR_TITLE", "")
          pr_body = os.getenv("PR_BODY", "")
          issue_body = os.getenv("ISSUE_BODY", "")
          changed_files = os.getenv("CHANGED_FILES", "")

          prompt = f"""
          Eres un revisor de código que evalúa Pull Requests en una aplicación de nómina hecha en React.

          A continuación tienes el título y descripción del PR:
          {pr_title}
          {pr_body}

          Y el issue que lo origina (descripción, pasos, checklist):
          {issue_body}

          Los siguientes archivos fueron modificados con su contenido:
          {changed_files}

          Realiza una revisión detallada como si fueras un desarrollador senior:
          1. Evalúa si los cambios cumplen con el objetivo del issue.
          2. Revisa si hay buenas prácticas en React (JSX, hooks, nombres, etc).
          3. Revisa exhaustivamente la ortografía en español de todos los textos visibles al usuario:
             - Mensajes de error
             - Labels de formularios
             - Botones
             - Títulos
             - Cualquier otro texto visible
          4. Sugiere mejoras de código si las hay.
          5. Verifica que no haya código comentado o console.logs.
          6. Asegúrate que los nombres de variables y funciones sean descriptivos.
          7. Revisa la consistencia en el estilo de los textos (mayúsculas/minúsculas, acentos).

          Proporciona tu revisión en formato markdown con secciones claras, incluyendo:
          - Un resumen general
          - Lista detallada de errores ortográficos encontrados
          - Problemas de código identificados
          - Sugerencias de mejora
          """

          try:
              response = client.chat.completions.create(
                  model="gpt-3.5-turbo",
                  messages=[
                      {"role": "system", "content": "Eres un revisor de código senior especializado en React y con excelente dominio del español."},
                      {"role": "user", "content": prompt}
                  ],
                  temperature=0.7,
                  max_tokens=2000
              )

              review = response.choices[0].message.content

              with open("review.md", "w", encoding="utf-8") as f:
                  f.write(review)

          except Exception as e:
              print(f"Error al generar la revisión: {str(e)}")
              exit(1)
          EOF

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review
            });
